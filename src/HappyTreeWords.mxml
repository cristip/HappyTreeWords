<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/mx" 
			   width="764" height="505"
			   currentState="default"
			   initialize="initializeHandler(event)"
			   >

	<fx:Script>
		<![CDATA[
			import flash.net.navigateToURL;
			import flash.utils.setTimeout;
			
			import mx.core.IVisualElement;
			import mx.events.FlexEvent;
			
			import ro.infoiasi.english.model.WordVO;
			import ro.infoiasi.english.utils.GameUtils;
			import ro.infoiasi.english.view.WordPiece;
			
			
			private var xloader:URLLoader;
			private var currentConnectedWord:WordPiece;
			[Bindable]
			private var currentLevelWordsCount:int=-1;
			[Bindable]
			private var currentScore:int;
			[Bindable]
			private var currentGameLevel:int;
			[Bindable]
			private var currentSentenceIndex:int;
			[Bindable] public var xData:XML;
			
			protected function getHelpBtn_clickHandler(event:MouseEvent):void
			{
				var url:URLRequest = new URLRequest("help.html");
				navigateToURL(url, "_blank");
			}

			protected function aboutBtn_clickHandler(event:MouseEvent):void
			{
				var url:URLRequest = new URLRequest("about.html");
				navigateToURL(url, "_blank");
			}


			protected function startGameBtn_clickHandler(event:MouseEvent):void
			{
				currentState="game";
				startGame();
			}
			
			
			
			
			protected function onXDataProgress(event:ProgressEvent):void
			{
				if(progressBar)
				{
					progressBar.setProgress(Math.round(event.bytesLoaded/event.bytesTotal*100), 100);
				}
			}
			protected function onXDataComplete(event:Event):void
			{
				xloader.removeEventListener(ProgressEvent.PROGRESS, onXDataProgress);
				xloader.removeEventListener(Event.COMPLETE, onXDataComplete);
				xData = XML(xloader.data);
				currentState="start";
				
			}
			protected function initializeHandler(event:FlexEvent):void
			{
				var request:URLRequest = new URLRequest("data.xml");
				xloader = new URLLoader();
				xloader.dataFormat = URLLoaderDataFormat.TEXT;
				xloader.addEventListener(ProgressEvent.PROGRESS, onXDataProgress);
				xloader.addEventListener(Event.COMPLETE, onXDataComplete);
				xloader.addEventListener(IOErrorEvent.IO_ERROR, onXIOError);
				xloader.load(request);
			}
			

			protected function onXIOError(event:IOErrorEvent):void
			{
				navigateToURL(new URLRequest("javascript:document.location.reload()"));
			}
			
			private function startGame():void
			{
				this.currentScore = 0;
				this.currentGameLevel = 0;
				playLevel();
			}
			
			
			private function clearLevelWordsUI():void
			{
				var element:IVisualElement;
				while(dragSources.numElements > 0)
				{
					element = dragSources.removeElementAt(0);
					removeEventListeners(element);
				}
				while(dropTargets.numElements > 0)
				{
					element = dropTargets.removeElementAt(0);
					removeEventListeners(element);
				}
				while(droppedItems.numElements > 0)
				{
					element = droppedItems.removeElementAt(0);
					removeEventListeners(element);
				}
				droppedItems.graphics.clear();
			}
			
			private function addEventListeners(element:IVisualElement):void
			{
				element.addEventListener(MouseEvent.MOUSE_DOWN, onWordMouseDown);
				element.addEventListener(MouseEvent.MOUSE_UP, onWordMouseUp);
			}
			
			private function removeEventListeners(element:IVisualElement):void
			{
				element.removeEventListener(MouseEvent.MOUSE_DOWN, onWordMouseDown);
				element.removeEventListener(MouseEvent.MOUSE_UP, onWordMouseUp);
			}
			
			private function playLevel():void
			{
				currentGameLevel = Math.floor(currentSentenceIndex/3);
				playSentence();
			}
			
			private function playSentence():void
			{
				
				clearLevelWordsUI();
				validationTree.alpha = 0;
				var words:Vector.<WordVO> = new Vector.<WordVO>();
				var structure:WordVO = GameUtils.createPhrase(currentSentenceIndex, xData, words);
				this.currentLevelWordsCount = words.length;
				var i:int;
				for(i = 0; i < currentLevelWordsCount; i++)
				{
					var wordp:WordPiece = new WordPiece();
					wordp.wordValue = words[i];
					addEventListeners(wordp);
					setTimeout(addAnimatedWord, i*100, wordp);
					wordp.text = words[i].form;
					wordp.isBlank = false;
					
				}
				setTimeout(enableValidateButton, currentLevelWordsCount* 100 + 500);
				
				
			}
			private function addAnimatedWord(word:WordPiece):void
			{
				word.setStyle('addedEffect', showEff);
				dragSources.addElement(word);
				word.clearStyle('addedEffect');
			}
			
			
			protected function onWordMouseDown(event:MouseEvent):void
			{
				var word:WordPiece = WordPiece(event.currentTarget);
				if(word.parent != droppedItems)
				{
					droppedItems.addElement(word);
				}
				word.startDrag(false, new Rectangle(0, 0, 490, 430));
				word.addEventListener(MouseEvent.MOUSE_MOVE, onWordMouseMove);
			}
			
			protected function onWordMouseUp(event:MouseEvent):void
			{
				var word:WordPiece = WordPiece(event.currentTarget);
				word.stopDrag();
				word.removeEventListener(MouseEvent.MOUSE_MOVE, onWordMouseMove);
				word.addEventListener("connect_out", onInitiateWordConnection);
			}
			
			protected function validateBtn_clickHandler(event:MouseEvent):void
			{
				validateBtn.enabled = false;
				currentSentenceIndex ++;
				playLevel();
				
			}
			
			protected function onInitiateWordConnection(event:Event):void
			{
				var word:WordPiece = WordPiece(event.target);
				currentConnectedWord = word;
				removeEventListeners(currentConnectedWord);
				addEventListener(MouseEvent.MOUSE_MOVE, mouseMove_drawConnector);
				addEventListener(MouseEvent.MOUSE_UP, mouseUp_drawConnector);
			}
			
			protected function mouseMove_drawConnector(event:MouseEvent):void
			{
				connectionGroup.graphics.clear();
				connectionGroup.graphics.moveTo(currentConnectedWord.x + currentConnectedWord.width/2, currentConnectedWord.y + currentConnectedWord.height -2); 
				connectionGroup.graphics.lineStyle(4, 0xCCCCCC, 1, true, LineScaleMode.NORMAL, CapsStyle.SQUARE);
				connectionGroup.graphics.lineTo(droppedItems.mouseX, droppedItems.mouseY);
			}
			
			protected function mouseUp_drawConnector(event:MouseEvent):void
			{
				for(var i:int = 0; i < droppedItems.numElements; i++)
				{
					var destinationWord:WordPiece = WordPiece(droppedItems.getElementAt(i));
					if(destinationWord.hitTestPoint(mouseX, mouseY) && destinationWord != currentConnectedWord && destinationWord.wordValue.head > 0 && !destinationWord.head)
					{
						currentConnectedWord.tails.push(destinationWord);
						destinationWord.head = currentConnectedWord;
						connectWords(currentConnectedWord, destinationWord);
						break;
					}
				}
				addEventListeners(currentConnectedWord);
				currentConnectedWord = null;
				connectionGroup.graphics.clear();
				removeEventListener(MouseEvent.MOUSE_MOVE, mouseMove_drawConnector);
				removeEventListener(MouseEvent.MOUSE_UP, mouseUp_drawConnector);
			}
			
			private function connectWords(sourceWord:WordPiece, destinationWord:WordPiece):void
			{
				 
				droppedItems.graphics.moveTo(sourceWord.x + sourceWord.width/2, sourceWord.y + sourceWord.height -2); 
				droppedItems.graphics.lineStyle(4, 0xFFFFFF, 1, true, LineScaleMode.NORMAL, CapsStyle.SQUARE);
				droppedItems.graphics.lineTo(destinationWord.x + destinationWord.width/2, destinationWord.y + 2);
			}
			
			private function onWordMouseMove(event:MouseEvent):void
			{
				var word:WordPiece = WordPiece(event.currentTarget);
				if(!word.head && word.tails.length == 0)
				{
					return;
				}
				reconnectAllWords();
			}
			
			private function reconnectAllWords():void
			{
				droppedItems.graphics.clear();
				for(var i:int = 0; i < droppedItems.numElements; i++)
				{
					var word:WordPiece = WordPiece(droppedItems.getElementAt(i));
					if(word.head)
					{
						connectWords(word.head, word);
					}
				}
			}
			
			protected function resetCurrentSentence_clickHandler(event:MouseEvent):void
			{
				playSentence();
			}
			
			private function enableValidateButton():void
			{
				validateBtn.enabled = true;	
			}
			
		]]>
	</fx:Script>
	
	
	<fx:Declarations>
		<s:DropShadowFilter id="dsFilter" blurX="5" blurY="5" distance="0" angle="0"/>
		<s:Parallel id="showEff">
			<s:Rotate3D angleZFrom="-90" angleZTo="0"/>
			<s:Fade alphaFrom="0.0" alphaTo="1.0" />
		</s:Parallel>
	</fx:Declarations>
	<s:states>
		<s:State name="default"/>
		<s:State name="start"/>
		<s:State name="game"/>
	</s:states>
	
	<s:transitions>
		<s:Transition fromState="start" toState="game">
			<s:Parallel>
				<s:Fade alphaFrom="0" alphaTo="1" target="{gameScreen}" duration="500"/>
				<s:Fade alphaFrom="1" alphaTo="0" target="{startScreen}" duration="500"/>
			</s:Parallel>
			
		</s:Transition>
		
	</s:transitions>
	
	<fx:Style source="ro/infoiasi/english/default.css"/>
	<s:SkinnableContainer id="initScreen" includeIn="default" width="764" height="505">
		<mx:ProgressBar label="Loading data..." minimum="0" maximum="100"  id="progressBar" horizontalCenter="0" verticalCenter="0"/>
	</s:SkinnableContainer>
	<s:SkinnableContainer id="startScreen" includeIn="start" width="764" height="505">
		<s:Label x="300" y="80" text="Cuvintele Fericite" id="startGameTitle"/>
		<s:HGroup left="10" verticalCenter="60" verticalAlign="middle" horizontalAlign="left">
		<mx:LinkButton label="Start" click="startGameBtn_clickHandler(event)" id="startGameBtn" verticalCenter="0" left="50"/>
		<mx:LinkButton click="getHelpBtn_clickHandler(event)" label="Ajutor" id="getHelpBtn" verticalCenter="0" horizontalCenter="0"/>
		<mx:LinkButton click="aboutBtn_clickHandler(event)" id="aboutBtn" label="Despre Joc" verticalCenter="0" right="50"/>
		</s:HGroup>
	</s:SkinnableContainer>
	<s:SkinnableContainer id="gameScreen" includeIn="game" width="100%" height="100%">
		<s:Image source="@Embed('assets/tree_full.png')" verticalCenter="0" left="10"/>
		<s:Image source="@Embed('assets/tree_full.png')" alpha="0" id="validationTree" verticalCenter="0" left="10"/>
		<s:Group id="dropTargets" horizontalCenter="-130" verticalCenter="0">
		</s:Group>
		<s:HGroup gap="5" id="dragSources" left="2" top="2"/>
		<s:Group id="droppedItems"/>
		<s:Group id="connectionGroup"/>
		<s:HGroup width="100%" height="40" horizontalAlign="left" bottom="0" verticalAlign="middle">
			<mx:LinkButton id="resetBtn" label="Reseteaza Propozitia" click="resetCurrentSentence_clickHandler(event)"/>
			<mx:LinkButton id="validateBtn" label="Urmatoarea propozitie" click="validateBtn_clickHandler(event)"/>
			<s:Spacer width="100%"/>
			<mx:Label filters="{[dsFilter]}" fontFamily="Englebert" color="#FFFFFF" fontSize="20" text="Punctaj {currentScore}   Nivelul {currentGameLevel+1}"/>
		</s:HGroup>
	</s:SkinnableContainer>
	
</s:Application>
